openapi: 3.0.3
info:
  title: Quiz API
  description: API для управления викторинами, пользователями и их ответами.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  /auth/login:
    post:
      summary: User login
      description: Аутентификация пользователя.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginIn'
      responses:
        '200':
          description: Успешная аутентификация.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOut'
        '400':
          description: Ошибка аутентификации.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: User logout
      description: Завершение сессии пользователя.
      tags:
        - Auth
      responses:
        '200':
          description: Успешный выход из системы.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success

  /auth/register/user:
    post:
      summary: User registration
      description: Регистрация нового пользователя.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterIn'
      responses:
        '200':
          description: Успешная регистрация пользователя.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '400':
          description: Ошибка регистрации.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register/admin:
    post:
      summary: Admin registration
      description: Регистрация нового администратора.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterIn'
      responses:
        '200':
          description: Успешная регистрация администратора.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '400':
          description: Ошибка регистрации.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/info/patient:
    post:
      summary: Get patient info
      description: Получает информацию о пациенте по его идентификатору.
      tags:
        - Patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPatientInfoIn'
      responses:
        '200':
          description: Успешный ответ с данными пациента.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPatientInfoOut'
        '400':
          description: Ошибка запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questions/start:
    post:
      summary: Start a new quiz
      description: Инициализирует новую сессию викторины и возвращает первый вопрос.
      tags:
        - Quiz
      responses:
        '200':
          description: Успешный старт викторины.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionOut'
        '500':
          description: Ошибка сервера при запуске викторины.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questions/get:
    post:
      summary: Get next question
      description: Возвращает следующий вопрос викторины.
      tags:
        - Quiz
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionIn'
      responses:
        '200':
          description: Успешное получение следующего вопроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionOut'
        '400':
          description: Ошибка запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера при обработке вопроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/response/save:
    post:
      summary: Save user's response
      description: Сохраняет ответ пользователя на вопрос викторины.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserResponseIn'
      responses:
        '200':
          description: Успешное сохранение ответа пользователя.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFailed:
                    type: boolean
                    description: Указывает, завалил ли пользователь тест досрочно.
                    example: false
        '400':
          description: Ошибка валидации данных запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера при сохранении ответа.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/response/get:
    post:
      summary: Get user's responses
      description: Получает ответы пользователя на вопросы викторины.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserResponsesIn'
      responses:
        '200':
          description: Успешный ответ с данными ответов пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponsesOutList'
        '400':
          description: Ошибка запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера при получении ответов.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/response/results:
    post:
      summary: Get users' results
      description: Получает результаты пациентов прохождения викторины.
      tags:
        - User
      responses:
        '200':
          description: Успешный ответ с результатами пользователей.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResultOutList'
        '400':
          description: Ошибка запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера при получении результатов.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    LoginIn:
      type: object
      properties:
        username:
          type: string
          description: Логин пользователя.
          example: "mihanynes"
        password:
          type: string
          description: Пароль пользователя.
          example: "11111111"
      required:
        - username
        - password

    LoginOut:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя.
          example: "123e4567-e89b-12d3-a456-426614174000"

    RegisterIn:
      type: object
      properties:
        username:
          type: string
          example: "mihanynes"
        first_name:
          type: string
          example: "misha"
        middle_name:
          type: string
          example: "andreevich"
        last_name:
          type: string
          example: "petrov"
        phone:
          type: string
          example: "+79991234567"
        email:
          type: string
          example: "mihanynes@aaaa.ru"
        snils:
          type: string
          example: "77777777777"
        password:
          type: string
          example: "11111111"
        password_confirm:
          type: string
          example: "11111111"
        is_admin:
          type: boolean
          example: false
      required:
        - first_name
        - last_name
        - email
        - password
        - password_confirm

    GetPatientInfoIn:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя.
          example: "123e4567-e89b-12d3-a456-426614174000"

    GetPatientInfoOut:
      type: object
      properties:
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        snils:
          type: string
        email:
          type: string

    QuestionIn:
      type: object
      properties:
        question_id:
          type: integer
          description: Идентификатор вопроса.
          example: 1
      required:
        - question_id

    QuestionOut:
      type: object
      properties:
        question_text:
          type: string
          description: Текст вопроса.
          example: "Какой язык программирования вы предпочитаете?"
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
        pass_num:
          type: integer
          description: Номер прохождения викторины.
          example: 1

    Option:
      type: object
      properties:
        answer_text:
          type: string
          description: Текст ответа.
          example: "Go"
        answer_id:
          type: integer
          description: Идентификатор ответа.
          example: 1
        points:
          type: integer
          description: Количество баллов за ответ.
          example: 10
        next_question_id:
          type: integer
          description: Идентификатор следующего вопроса.
          example: 2
        is_ended:
          type: boolean
          description: Флаг окончания викторины.
          example: false

    SaveUserResponseIn:
      type: object
      properties:
        response_id:
          type: integer
          description: Идентификатор ответа.
          example: 1
        pass_num:
          type: integer
          description: Номер прохождения викторины.
          example: 1
      required:
        - response_id
        - pass_num

    GetUserResponsesIn:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя.
          example: "123e4567-e89b-12d3-a456-426614174000"
        pass_num:
          type: integer
          description: Номер прохождения викторины.
          example: 1
      required:
        - user_id
        - pass_num

    GetUserResponsesOut:
      type: object
      properties:
        question_text:
          type: string
          description: Текст вопроса.
          example: "Какой язык программирования вы предпочитаете?"
        answer_text:
          type: string
          description: Текст ответа.
          example: "Go"
        response_score:
          type: integer
          description: Количество баллов за ответ.
          example: 10

    GetUserResponsesOutList:
      type: object
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/GetUserResponsesOut'

    GetUsersResultIn:
      type: object
      properties:
        pass_num:
          type: integer
          description: Номер прохождения викторины.
          example: 1
      required:
        - pass_num

    GetUsersResultOut:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя.
          example: "123e4567-e89b-12d3-a456-426614174000"
        first_name:
          type: string
          description: Имя пользователя.
          example: "Иван"
        last_name:
          type: string
          description: Фамилия пользователя.
          example: "Иванов"
        user_score:
          type: integer
          description: Общий результат пользователя.
          example: 75
        is_failed:
          type: boolean
          description: Флаг неудачного прохождения.
          example: false

    GetUsersResultOutList:
      type: object
      properties:
        user_results:
          type: array
          items:
            $ref: '#/components/schemas/GetUsersResultOut'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Описание ошибки.
          example: "Ошибка аутентификации"



