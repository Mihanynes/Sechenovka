package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"sync"

	"github.com/SherClockHolmes/webpush-go"
)

//
//// –ü–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É)
//var subscriptions = make([]*webpush.Subscription, 0)
//var mu sync.Mutex
//
//// –¢–≤–æ—è –ø–æ—á—Ç–∞ + VAPID –∫–ª—é—á–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ env)
//var (
//	vapidPublicKey  = "–¢–í–û–ô_PUBLIC_KEY"
//	vapidPrivateKey = "–¢–í–û–ô_PRIVATE_KEY"
//)
//
//func main() {
//	http.HandleFunc("/api/subscribe", handleSubscribe)
//	http.HandleFunc("/api/notify", handleNotify)
//
//	fmt.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
//	log.Fatal(http.ListenAndServe(":8080", nil))
//}
//
//func handleSubscribe(w http.ResponseWriter, r *http.Request) {
//	var sub webpush.Subscription
//	if err := json.NewDecoder(r.Body).Decode(&sub); err != nil {
//		http.Error(w, "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏", http.StatusBadRequest)
//		return
//	}
//
//	mu.Lock()
//	subscriptions = append(subscriptions, &sub)
//	mu.Unlock()
//
//	fmt.Println("–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:", sub.Endpoint)
//	w.WriteHeader(http.StatusCreated)
//}
//
//func handleNotify(w http.ResponseWriter, r *http.Request) {
//	mu.Lock()
//	defer mu.Unlock()
//
//	payload := map[string]string{
//		"title": "–ß–µ–∫–ê–ø –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç",
//		"body":  "–°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ! üíä",
//	}
//	body, _ := json.Marshal(payload)
//
//	for _, sub := range subscriptions {
//		resp, err := webpush.SendNotification(body, sub, &webpush.Options{
//			TTL:             60,
//			VAPIDPublicKey:  vapidPublicKey,
//			VAPIDPrivateKey: vapidPrivateKey,
//			Subscriber:      "mailto:you@example.com",
//		})
//		if err != nil {
//			fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err)
//			continue
//		}
//		defer resp.Body.Close()
//	}
//
//	fmt.Println("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
//	w.Write([]byte("–û–ö"))
//}
