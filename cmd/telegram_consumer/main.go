package main

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤!üëã

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /register, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.ü´Ä
`

// UserState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserState struct {
	WaitingForLogin    bool
	WaitingForPassword bool
	Login              string
}

var (
	bot        *tgbotapi.BotAPI
	userStates = make(map[int64]*UserState) // chat_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ
)

func main() {
	token := "6658100298:AAEJIXBUpevzDcbQSBu47TRikbQ44XS0nPo"

	var err error
	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 30

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
		if state, exists := userStates[chatID]; exists {
			handleUserState(chatID, text, state)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		if update.Message.IsCommand() {
			switch text {
			case "/register":
				// –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
				userStates[chatID] = &UserState{
					WaitingForLogin: true,
				}
				msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ üíª:")
				bot.Send(msg)
			default:
				msg := tgbotapi.NewMessage(chatID, welcomeMessage)
				bot.Send(msg)
			}
		} else {
			msg := tgbotapi.NewMessage(chatID, welcomeMessage)
			bot.Send(msg)
		}

	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleUserState(chatID int64, text string, state *UserState) {
	if state.WaitingForLogin {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –∏ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å
		state.Login = text
		state.WaitingForLogin = false
		state.WaitingForPassword = true

		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ üíª:")
		bot.Send(msg)
		return
	}

	if state.WaitingForPassword {
		// –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
		password := text

		baseUrl := "http://go_app:8080/api/auth/telegram/login"
		params := url.Values{}
		params.Set("password", password)
		params.Set("username", state.Login)
		params.Set("chatId", strconv.FormatInt(chatID, 10))
		fullURL := baseUrl + "?" + params.Encode()

		resp, err := http.Post(fullURL, "application/x-www-form-urlencoded", strings.NewReader(""))
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "+err.Error())
			bot.Send(msg)
			delete(userStates, chatID)
			return

		}
		if resp.StatusCode != 200 {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
			bot.Send(msg)
			delete(userStates, chatID)
			return
		}

		msg := tgbotapi.NewMessage(chatID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–õ–æ–≥–∏–Ω: "+state.Login+"\n–ü–∞—Ä–æ–ª—å: "+password)
		bot.Send(msg)

		// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		delete(userStates, chatID)
	}
}
